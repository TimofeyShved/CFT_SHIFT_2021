Задание 1

Пользователи



Необходимо реализовать CRUD операции для сущности "пользователь".



В рамках задачи данные пользователей не обязательно хранить в БД, можно хранить в памяти, а можно и просто возвращать данные, прописанные в коде. Основная цель - создать набор методов API.



Реализовать:

Создание пользователя.

Получить всех пользователей.

Получить пользователя с указанным id.

Обновить пользователя.

Обработка ошибок *.



Создание пользователя.

Метод: POST

URL: ../user



Пример запроса



{

    "firstName": "Nikita",

    "lastName": "Mameev"

}



Пример ответа



{

    "userId": 1,

    "firstName": "Nikita",

    "lastName": "Mameev"

}



Получить всех пользователей.

Метод: GET

URL: ../users



Пример ответа



[

    {

        "userId": 1,

        "firstName": "Nikita",

        "lastName": "Mameev"

    },

    ...

]



Получить пользователя с указанным id.

Метод: GET

URL: ../user/{userId}



Пример ответа



{

    "userId": 1,

    "firstName": "Nikita",

    "lastName": "Mameev"

}



Обновить пользователя.

Метод: PUT

URL: ../user/{userId}



Пример запроса



{

    "firstName": "Evgenii",

    "lastName": "Boev"

}



Пример ответа



{

    "userId": 1,

    "firstName": "Evgenii",

    "lastName": "Boev"

}



Обработка ошибок *.

В случае, если в коде, обрабатывающем запрос, выбрасывается исключение / просто по логике запрос не может завершиться корректно (как, скажем, если пользователя с запрошенным идентификатором ещё не существует), то необходимо возвращать JSON специального вида, как указано ниже. В идеале, на разные типы ошибочных ситуаций необходимы отдельные коды.
На случай же всех непредвиденных ситуаций, не связанных с логикой работы приложения, (скажем, если вдруг не удалось подключиться к БД по каким-либо сетевым проблемам), можно завести специальный код ошибки - "UNKNOWN_ERROR"

При успехе - 200 и нормальное тело (или пустое тело, если у запроса нет полезной нагрузки в ответе)
При ошибке - 500 и тело с описанием ошибки:

Пример ответа



{

    "code": "USER_NOT_FOUND" -- Или другой код ошибки по контексту

}



